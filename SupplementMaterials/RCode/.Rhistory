# With Projection
##############################################
proj4string(las.corn2001) <- CRS("+proj=longlat +datum=NAD83")
las.proj <- spTransform(las.corn2001, CRS("+proj=merc +units=m +ellps=GRS80"))
########################################################################
#################################################################################
las.proj.ppp <- as(las.proj, "ppp")
plot(las.proj.ppp, use.marks = TRUE, which.marks=8, cex=0.5)
##################################
las.corn.rotated <- rotate.ppp(las.proj.ppp, angle = 22*(pi/180))
las.corn.sp.rotated <- as.SpatialPointsDataFrame.ppp(las.corn.rotated)
plot(las.corn.sp.rotated)
las.corn.sp.rotated$marks.nit_trts <- factor(las.corn.sp.rotated$marks.nit_trts)
spplot(las.corn.sp.rotated, "marks.nit_trts", cex=0.6, col.regions = nit.trt.cols, pch=16)
n1andn5reps <- which(las.corn.sp.rotated$marks.nf %in% c("N1", "N5"))
las.corn.sp.subset <- las.corn.sp.rotated[n1andn5reps,]
las.corn.sp.subset.data <- las.corn.sp.subset@data
las.corn.sp.subset.data$marks.nf <- factor(las.corn.sp.subset.data$marks.nf)
las.corn.sp.subset.data$marks.nit_trts <- factor(las.corn.sp.subset.data$marks.nit_trts)
las.corn.sp.subset@data <- las.corn.sp.subset.data
spplot(las.corn.sp.subset, "marks.nit_trts",
cex=0.6, col.regions = nit.trt.cols[c(2,5)], pch=16)
d <- las.corn.sp.subset
d2 <- las.corn.sp.rotated
min_x <- head(sort(subset(d, marks.nf == "N5")$mx), n=3)[3]
max_x <- max(subset(d, marks.nf == "N5")$mx)
min_y <- min(subset(d2, marks.nf == "N4")$my)
c.x <- mean(diff(sort(subset(d, (marks.nf == "N5" & marks.rep =="R3"))$mx)))
c.y <- c.x
grd <- SpatialGrid(GridTopology(c(min_x+2*c.x, min_y), rep(c.x, 2), c(90,15)))
grd2 <- SpatialGrid(GridTopology(c(min_x+2*c.x, min_y+c.y), rep(c.x, 2), c(90,13)))
proj4string(grd) <- crs(d)
proj4string(grd2) <- crs(d)
plot(d, col="gray50")
plot(grd, col="black")
plot(d, col="red", pch=16, cex=0.2,add=TRUE)
plot(grd, col="black")
plot(las.corn.rotated, col="red", pch=16, cex=0.2,add=TRUE)
#########################################################################
spplot(las.corn.sp.subset, "marks.nit_trts",
cex=0.6, col.regions = nit.trt.cols[c(2,5)], pch=16)
grd2 <- SpatialGrid(GridTopology(c(min_x+2*c.x, min_y+c.y), rep(c.x, 2), c(90,13)))
proj4string(grd2) <- crs(d)
plot(grd2, col="black")
plot(las.corn.rotated, col="red", pch=16, cex=0.2,add=TRUE)
plot(grd2, col="black")
plot(las.corn.rotated, col="red", pch=16, cex=0.2,add=TRUE)
SpatialPolygonsRescale(layout.scale.bar(), offset = locator(1),
scale = 250, fill = c("transparent", "black"),
plot.grid = FALSE)
plot(grd2, col="black")
plot(las.corn.rotated, col="red", pch=16, cex=0.2,add=TRUE)
SpatialPolygonsRescale(layout.scale.bar(), offset = locator(1),
scale = 250, fill = c("transparent", "black"),
plot.grid = FALSE)
plot(grd2, col="black")
plot(las.corn.rotated, col="red", pch=16, cex=0.2,add=TRUE)
SpatialPolygonsRescale(layout.scale.bar(), offset = locator(1),
scale = 250, fill = c("transparent", "black"),
plot.grid = FALSE)
plot(grd2, col="black")
plot(las.corn.rotated, col="red", pch=16, cex=0.2,add=TRUE)
SpatialPolygonsRescale(layout.scale.bar(), offset = locator(1),
scale = 250, fill = c("transparent", "black"),
plot.grid = FALSE)
text(locator(1), "0")
text(locator(1), "250 m")
plot(grd2, col="black")
plot(las.corn.rotated, col="red", pch=16, cex=0.2,add=TRUE)
SpatialPolygonsRescale(layout.scale.bar(), offset = locator(1),
scale = 250, fill = c("transparent", "black"),
plot.grid = FALSE)
text(locator(1), "0")
text(locator(1), "250 m")
las.corn.sp.rotated$marks.nit_trts <- factor(las.corn.sp.rotated$marks.nit_trts)
spplot(las.corn.sp.rotated, "marks.nit_trts", cex=0.6, col.regions = nit.trt.cols, pch=16)
#################################################
# Compute the distances between different marks #
#################################################
las.corn.mark <- las.corn.rotated
las.marks <- marks(las.corn.rotated)
marks(las.corn.mark) <- las.marks$nf
plot(las.corn.mark)
las.corn.mark2 <- split(las.corn.mark)
las.corn.n0 <- las.corn.mark2[["N0"]]
las.corn.n2 <- las.corn.mark2[["N2"]]
las.corn.n3 <- las.corn.mark2[["N3"]]
las.corn.n4 <- las.corn.mark2[["N4"]]
las.corn.n1 <- las.corn.mark2[["N1"]]
las.corn.n5 <- las.corn.mark2[["N5"]]
plot(las.corn.n1, cex=0.5, pch=16, cols="red")
plot(las.corn.n5, cex=0.5, pch=16, cols="blue", add=TRUE)
plot(las.corn.n0, cex=0.5, pch=16, cols="green", add=TRUE)
plot(las.corn.n2, cex=0.5, pch=16, cols="gray", add=TRUE)
plot(las.corn.n3, cex=0.5, pch=16, cols="yellow", add=TRUE)
plot(las.corn.n4, cex=0.5, pch=16, cols="black", add=TRUE)
##########################################################################################
spplot(las.corn2001, "topo", cex=1.1, pch=16, col.regions = terrain.colors(255))
names(las.corn.sp.rotated)
spplot(las.corn.sp.rotated, "marks.topo",
cex=1.1, pch=16,
col.regions = terrain.colors(255))
?applot
?spplot
#########################################################################
spplot(las.corn.sp.subset, "marks.nit_trts",
cex=0.6, col.regions = nit.trt.cols[c(2,5)], pch=16,
border = NA)
spplot(las.corn.sp.rotated, "marks.topo",
cex=1.1, pch=16,
col.regions = terrain.colors(255),
border = NA)
########################################################################
lros.distance.mat <- gw.dist(dp.locat=coordinates(las.corn.sp.rotated),
rp.locat=coordinates(grd2))
gwr.lrosas1 <- gwr.basic(marks.yield ~ 1 + marks.nitro + I(marks.nitro^2),
data = las.corn.sp.rotated,
regression.points=grd2,
bw=26.00,
dMat=lros.distance.mat,
kernel='boxcar')
names(gwr.lrosas1$SDF)
plot(gwr.lrosas1$SDF['Intercept'], col=rev(rainbow(255)),  axis.pos = 1)
contour(gwr.lrosas1$SDF,'Intercept', add=TRUE, lwd=0.5)
plot(gwr.lrosas1$SDF['Intercept'], col=rev(rainbow(255)),  axis.pos = 1)
contour(gwr.lrosas1$SDF,'Intercept', add=TRUE, lwd=1)
########################################################################
gwr.yield.nitro.mvwindow <- gwr.lrosas1
plot(gwr.yield.nitro.mvwindow$SDF['Intercept'], col=rev(rainbow(255)),  axis.pos = 1)
contour(gwr.yield.nitro.mvwindow$SDF,'Intercept', add=TRUE, lwd=1.5,
vfont=c("sans serif", "bold italic"), labcex=1.2)
contour(gwr.yield.nitro.mvwindow$SDF,'Intercept', add=TRUE, lwd=1.5,
vfont=c("sans serif", "bold italic"), labcex=1.0)
plot(gwr.yield.nitro.mvwindow$SDF['Intercept'], col=rev(rainbow(255)),  axis.pos = 1)
contour(gwr.yield.nitro.mvwindow$SDF,'Intercept', add=TRUE, lwd=1.5,
vfont=c("sans serif", "bold italic"), labcex=1.0)
mvwindow.intercept.ppp <- as(gwr.yield.nitro.mvwindow$SDF['Intercept'], 'ppp')
mvwindow.intercept.smooth <- Smooth(mvwindow.intercept.ppp)
par(mfrow=c(1,1))
plot(mvwindow.intercept.smooth, col=rev(rainbow(255)),  ribsep=0.01,
ribside="bottom", main="")
contour(mvwindow.intercept.smooth,'Intercept', add=TRUE, lwd=1,
vfont=c("sans serif", "bold italic"), labcex=0.9)
names(gwr.yield.nitro.mvwindow$SDF)
#######################################################################
mvwindow.lincoef.ppp <- as(gwr.yield.nitro.mvwindow$SDF['marks.nitro'],
'ppp')
mvwindow.lincoef.smooth <- Smooth(mvwindow.lincoef.ppp)
par(mfrow=c(1,1))
plot(mvwindow.lincoef.smooth, col=rev(rainbow(255)),  ribsep=0.01,
ribside="bottom", main="")
contour(mvwindow.lincoef.smooth,'marks.nitro', add=TRUE, lwd=1,
vfont=c("sans serif", "bold italic"), labcex=0.9)
#####################################################################
mvwindow.quadcoef.ppp <- as(gwr.yield.nitro.mvwindow$SDF['I.marks.nitro.2.'],
'ppp')
mvwindow.quadcoef.smooth <- Smooth(mvwindow.quadcoef.ppp)
par(mfrow=c(1,1))
plot(mvwindow.quadcoef.smooth, col=rev(rainbow(255)),  ribsep=0.01,
ribside="bottom", main="")
names(mvwindow.quadcoef.smooth)
plot(mvwindow.quadcoef.smooth, col=rev(rainbow(255)),  ribsep=0.01,
ribside="bottom", main="")
contour(mvwindow.quadcoef.smooth, add=TRUE, lwd=1,
vfont=c("sans serif", "bold italic"), labcex=0.9)
quad_plot <-  plot(mvwindow.quadcoef.smooth, col=rev(rainbow(255)),  ribsep=0.01,
ribside="bottom", main="")
str(quad_plot)
plot(mvwindow.quadcoef.smooth, col=matlab.like2,  ribsep=0.01,
ribside="bottom", main="")
install.packages("colorRamps")
library(colorRamps)
plot(mvwindow.quadcoef.smooth, col=matlab.like2,  ribsep=0.01,
ribside="bottom", main="")
contour(mvwindow.quadcoef.smooth, add=TRUE, lwd=1,
vfont=c("sans serif", "bold italic"), labcex=0.9)
plot(mvwindow.intercept.smooth, col=matlab.like2,  ribsep=0.01,
ribside="bottom", main="")
contour(mvwindow.intercept.smooth,'Intercept', add=TRUE, lwd=1,
vfont=c("sans serif", "bold italic"), labcex=0.9)
plot(mvwindow.lincoef.smooth, col=matlab.like2,  ribsep=0.01,
ribside="bottom", main="")
contour(mvwindow.lincoef.smooth,'marks.nitro', add=TRUE, lwd=1,
vfont=c("sans serif", "bold italic"), labcex=0.9)
plot(mvwindow.quadcoef.smooth, col=matlab.like2,  ribsep=0.01,
ribside="bottom", main="")
contour(mvwindow.quadcoef.smooth, add=TRUE, lwd=1,
vfont=c("sans serif", "bold italic"), labcex=0.9)
?gwr.t.adjust
gwr.t.adjust
?pt
citation(package="agridat")
rm(list=ls())
library(agridat)
library(dplyr)
library(ggplot2)
library(rgdal)
library(sf)
library(raster)
library(lattice)
library(latticeExtra)
library(classInt)
library(GWmodel)
library(maptools)
library(spatstat)
library(spgwr)
################################################################################################
data(gartner.corn)
dat <- gartner.corn
# Calculate yield bushels/ acre
dat <-  transform(dat, yield=(mass*seconds*(100-moist)/(100-15.5)/56)/(dist*360/6272640))
# Delete yield outliers
dat <- subset(dat, yield >50)
dat <- subset(dat, lat < 43.925850 & lat > 43.921178)
coordinates(dat) <- c("long", "lat")
epsg <- make_EPSG()
i <- grep("Minnesota", epsg$note, ignore.case=TRUE)
epsg[i,] # epsg 26993
proj4string(dat) <- CRS("+proj=longlat +datum=NAD83")
crs(dat)
dat.proj <- spTransform(dat, CRS("+proj=merc +units=m +ellps=GRS80"))
summary(dat.proj)
str(dat.proj)
box.dim <- bbox(dat.proj)
diff(box.dim[1,])
diff(box.dim[2,])
spplot(dat.proj, zcol="yield", cex=0.5, pch=16,
col.regions = terrain.colors(255),
scales = list(draw=TRUE))
yield.plot <- spplot(dat.proj, zcol = "yield", cex=0.5, pch=16,
col.regions = terrain.colors(255),
scales = list(draw=TRUE))
yield.plot
str(yield.plot)
yield.pallette <- yield.plot$legend$bottom$args$key$points$col
green.pal <- brewer.pal(n = 5, name = "Greens")
yield.plot2 <- spplot(dat.proj, zcol = "yield", cex=0.5, pch=16,
col.regions = rev(terrain.colors(255)),
scales = list(draw=TRUE))
yield.pallette2 <- yield.plot2$legend$bottom$args$key$points$col
yield.pallette2[5] <- green.pal[5]
yield.pallette2[1] <- green.pal[2]
spplot(dat.proj, zcol = "yield", cex=0.5, pch=16, col.regions = green.pal,
scales = list(draw=TRUE))
spplot(dat.proj, zcol = "yield", cex=0.5, pch=16, col.regions = yield.pallette2,
scales = list(draw=TRUE))
breaks.qt <- classIntervals(dat.proj$yield, n = 5,
style = "quantile",
intervalClosure = "right")
diff(breaks.qt$brks)
plot(breaks.qt, pal = yield.pallette2)
q5Colours <- findColours(breaks.qt, yield.pallette2)
plot(dat, col = q5Colours, pch = 16, cex=0.7)
legend("topleft", fill = attr(q5Colours, "palette"),
legend = names(attr(q5Colours, "table")),
bty = "n")
###################################################################
breaks.qt3 <- classIntervals(dat.proj$yield, n = 3,
style = "quantile",
intervalClosure = "right")
diff(breaks.qt3$brks)
yield.pallette3 <- yield.pallette2[-c(1,5)]
plot(breaks.qt3, pal = yield.pallette3, xlim=c(72, 192),
xlab="", ylab="cumulative proportion of points", main="")
options(digits=5)
par(mfrow=c(1,1))
plot(breaks.qt3, pal = yield.pallette3, xlim=c(72, 192),
xlab="", ylab="cumulative proportion of points", main="")
###################################################################
breaks.qt3 <- classIntervals(dat.proj$yield, n = 3,
style = "quantile",
intervalClosure = "right")
diff(breaks.qt3$brks)
yield.pallette3 <- yield.pallette2[-c(1,5)]
plot(breaks.qt3, pal = yield.pallette3, xlim=c(72, 192),
xlab="", ylab="cumulative proportion of points", main="")
options(digits=5)
q5Colours3 <- findColours(breaks.qt3, yield.pallette3)
##############
# Yield Plot #
##############
spplot(dat.proj, zcol="yield", cex=0.5, pch=16,
col.regions = terrain.colors(255),
scales = list(draw=TRUE))
yield.plot <- spplot(dat.proj, zcol = "yield", cex=0.5, pch=16,
col.regions = terrain.colors(255),
scales = list(draw=TRUE))
yield.plot
str(yield.plot)
yield.pallette <- yield.plot$legend$bottom$args$key$points$col
green.pal <- brewer.pal(n = 5, name = "Greens")
yield.plot2 <- spplot(dat.proj, zcol = "yield", cex=0.5, pch=16,
col.regions = rev(terrain.colors(255)),
scales = list(draw=TRUE))
yield.pallette2 <- yield.plot2$legend$bottom$args$key$points$col
yield.pallette2[5] <- green.pal[5]
yield.pallette2[1] <- green.pal[2]
spplot(dat.proj, zcol = "yield", cex=0.5, pch=16, col.regions = green.pal,
scales = list(draw=TRUE))
spplot(dat.proj, zcol = "yield", cex=0.5, pch=16, col.regions = yield.pallette2,
scales = list(draw=TRUE))
#apply(bbox(dat.proj), 1, diff) * 1000
#################################################
# Final plot for the paper (Gartner yield data) #
#################################################
spplot(dat.proj, zcol = "yield", cex=1, pch=16,
at = breaks.qt$brks,
col.regions = yield.pallette2,
scales = list(draw=TRUE))
spplot(dat, zcol = "yield", cex=0.6, pch=16,
col.regions = yield.pallette2,
scales = list(draw=TRUE))
##################################################
breaks.qt <- classIntervals(dat.proj$yield, n = 5,
style = "quantile",
intervalClosure = "right")
diff(breaks.qt$brks)
plot(breaks.qt, pal = yield.pallette2)
q5Colours <- findColours(breaks.qt, yield.pallette2)
plot(dat, col = q5Colours, pch = 16, cex=0.7)
legend("topleft", fill = attr(q5Colours, "palette"),
legend = names(attr(q5Colours, "table")),
bty = "n")
###################################################################
breaks.qt3 <- classIntervals(dat.proj$yield, n = 3,
style = "quantile",
intervalClosure = "right")
diff(breaks.qt3$brks)
yield.pallette3 <- yield.pallette2[-c(1,5)]
plot(breaks.qt3, pal = yield.pallette3, xlim=c(72, 192),
xlab="", ylab="cumulative proportion of points", main="")
data(gartner.corn)
dat <- gartner.corn
# Calculate yield bushels/ acre
dat <-  transform(dat, yield=(mass*seconds*(100-moist)/(100-15.5)/56)/(dist*360/6272640))
# Delete yield outliers
dat <- subset(dat, yield >50)
dat <- subset(dat, lat < 43.925850 & lat > 43.921178)
coordinates(dat) <- c("long", "lat")
###############################
proj4string(dat) <- CRS("+proj=longlat +datum=NAD83")
dat.proj <- spTransform(dat, CRS("+proj=merc +units=m +ellps=GRS80"))
box.dim <- bbox(dat.proj)
###############################
yield.plot <- spplot(dat.proj, zcol = "yield", cex=0.5, pch=16,
col.regions = rev(terrain.colors(255)),
scales = list(draw=TRUE))
yield.pallette <- yield.plot$legend$bottom$args$key$points$col
green.pal <- brewer.pal(n = 5, name = "Greens")
yield.pallette[5] <- green.pal[5]
yield.pallette[1] <- green.pal[2]
###############################
breaks.qt3 <- classIntervals(dat.proj$yield, n = 3,
style = "quantile",
intervalClosure = "right")
diff(breaks.qt3$brks)
yield.pallette3 <- yield.pallette[-c(1,5)]
plot(breaks.qt3, pal = yield.pallette3, xlim=c(72, 192),
xlab="", ylab="cumulative (%) of data points", main="")
options(digits=5)
q5Colours3 <- findColours(breaks.qt3, yield.pallette3)
######################
dat.proj2 <- dat.proj
box.dim2 <- box.dim
box.dim2[2,1] <- box.dim[2,1] - 20
dat.proj2@bbox <- box.dim2
plot(dat.proj2, col = q5Colours3, pch = 16, cex=0.6)
legend("topleft", fill = attr(q5Colours3, "palette"),
#legend = names(attr(q5Colours3, "table")),
legend =  c("72.42-131.04", "131.04-141.51", "141.51-191.25"),
bty = "n", title = "Yield (bushels/acre)")
SpatialPolygonsRescale(layout.scale.bar(), offset = locator(1),
scale = 250, fill = c("transparent", "black"),
plot.grid = FALSE)
text(locator(1), "0")
text(locator(1), "250 m")
SpatialPolygonsRescale(layout.north.arrow(), offset=locator(1),
scale=100, plot.grid=FALSE)
bbox <- bbox(dat.proj)
long <- bbox[1,]
lat <- bbox[2,]
min.long <- min(long)
range.long <- diff(long)
min.lat <- min(lat)
range.lat <- diff(lat)
ngrids <- 100
cell.size <- range.lat/ngrids
cell.dim <- c(round(range.long/cell.size), round(range.lat/cell.size))
grd <- SpatialGrid(GridTopology(c(min.long, min.lat), rep(cell.size, 2), cell.dim))
plot(grd, xlim = long, ylim=lat, col="gray50")
plot(grd, col="gray50")
plot(dat.proj, col="red", , cex=0.2, pch=16, add=TRUE)
plot(dat.proj, col="red", cex=0.2, pch=16)
proj4string(grd) <- proj4string(dat.proj)
identical(crs(grd), crs(dat.proj))
plot(breaks.qt3, pal = yield.pallette3, xlim=c(72, 192),
xlab="", ylab="cumulative (%) of data points", main="")
class(breaks.qt3)
str(breaks.qt3)
4200 * 0
install.packages("spatstat")
library(spatstat)
install.packages("remotes")
require(remotes)
install_github('spatstat/spatstat.utils')
install_github('spatstat/spatstat.data')
install_github('spatstat/spatstat')
require(remotes)
install_github('spatstat/spatstat.utils')
install_github('spatstat/spatstat.data')
install_github('spatstat/spatstat')
install.packages("devtools")
library(devtools)
require(remotes)
install_github('spatstat/spatstat')
library(remotes)
install_github('spatstat/spatstat')
setwd("C:/Users/267592e/SUMAN_RAKSHIT/VariableSelectionOnLinnet/SubmissionANZS_11Nov2019/varselect/Latex/ANZJS_SUBMISSION/SupplementMaterials/RCode")
library(spatstat)
library(spatstat.utils)
library(sp)
library(glmnet)
library(dplyr)
library(stringr)
library(gstat)
#########################################################################
# Source R-script with utility functions                                #
#########################################################################
source("Utils.R")
#######################################################################################
#########################################################################
#                                                                       #
#                R-Code to create Table-1 and Table-2 in the paper      #
#                                                                       #
#########################################################################
##################################################
# Load the LASSO results in Table-1  and Table-2 #
##################################################
reg_coef_lasso_all <- readRDS("../Data/lasso_est_for_paper.rds")
reg_coef_lasso <- reg_coef_lasso_all %>% filter(TuningCoef == "Min")
reg_coef_lasso2 <- get_bias_se_utils(reg_coef_lasso)
######################################
# Print the LASSO results in Table-1 #
######################################
lasso_b1tob5 <- reg_coef_lasso2$bias_se_b1_to_b5
print(lasso_b1tob5)
######################################
# Print the LASSO results in Table-2 #
######################################
lasso_b6tob10 <- reg_coef_lasso2$bias_se_b6_to_b10 %>%
rowwise() %>%
mutate(Model = paste0(Model, ifelse(is.na(lixel),"",lixel))) %>%
select(-one_of(c("lixel")))
print(lasso_b6tob10)
class(reg_coef_lasso_all)
head(reg_coef_lasso_all)
seq(100, by=25, length=1000)
varselect_single_simulate
covars.on.seg <- readRDS("../Data/WA_Linnet_Covar_Data")
covars.on.seg <- readRDS("../Data/WA_Linnet_Covar_Data.rds")
Linnet_with_covars <- readRDS("../Data/WA_Linnet_Covar_Data.rds")
rm(covars.on.seg)
Lmarks <- marks(Linnet_with_covars$lines)
road_vars <- c("SPLI_SPEED", "HOAL_CURVE", "TOTAL_PAVE",
"TOTAL_SEAL","TRAFFICABL", "SHOULDER_S",
"KERB_L", "KERB_R", "NO_OF_LANE", "FLOODWAY", "BRIDGE")
covars.on.seg <- Lmarks[road_vars]
head(covars.on.seg)
summary(covars.on.seg)
covars_scaled <- covars.on.seg
covars_scaled$SHOULDER_S <- factor(as.integer(covars.on.seg$SHOULDER_S) -1)
covars_scaled$KERB_L <- factor(as.integer(covars.on.seg$KERB_L) -1)
covars_scaled$KERB_R <- factor(as.integer(covars.on.seg$KERB_R) -1)
covars_scaled$FLOODWAY <- factor(as.integer(covars.on.seg$FLOODWAY) -1)
covars_scaled$BRIDGE <- factor(as.integer(covars.on.seg$BRIDGE) -1)
covars_scaled$SPLI_SPEED <- covars.on.seg$SPLI_SPEED/max(covars.on.seg$SPLI_SPEED)
covars_scaled$HOAL_CURVE <- covars.on.seg$HOAL_CURVE/max(covars.on.seg$HOAL_CURVE)
covars_scaled$TOTAL_PAVE <- covars.on.seg$TOTAL_PAVE/max(covars.on.seg$TOTAL_PAVE)
covars_scaled$TOTAL_SEAL <- covars.on.seg$TOTAL_SEAL/max(covars.on.seg$TOTAL_SEAL)
covars_scaled$TRAFFICABL <- covars.on.seg$TRAFFICABL/max(covars.on.seg$TRAFFICABL)
func_list_scaled <- lapply(covars_scaled, function(z){function(x,y,seg,tp){z[seg]}})
linfun_list_scaled <- lapply(func_list_scaled, function(z, net){linfun(z, net)}, net=Linnet_with_covars)
plot(linfun_list_scaled[["TRAFFICABL"]], main="", leg.side="top", window=FALSE, leg.wid = 0.025, leg.sep=0.001)
plot(linfun_list[["TRAFFICABL"]], main="", leg.side="top", window=FALSE, leg.wid = 0.025, leg.sep=0.001)
form1 <- as.formula(paste("~ " , paste0(names(linfun_list_scaled), collapse = " + ")))
form1
#####################################
# Load the WA nework and crash data #
#####################################
wa_crash <- readRDS("../Data/Marked_WA_Crash_NetRepaired.rds")
class(wa_crash)
prep_all_wa <- readRDS("../Data/prep_all_wa.rds")
class(wa_crash)
counts_data_all_wa <- get_counts_on_segments(wa_crash)
View(counts_data_all_wa)
class(covars_scaled)
nrow(covars_scaled)
wa_crash <- readRDS("../Data/Marked_WA_Crash.rds")
counts_data_all_wa <- get_counts_on_segments(wa_crash)
class(Linnet_with_covars)
pts <- as.ppp(wa_crash)
net.lpp.new <- lpp(X=pts, L=Linnet_with_covars)
counts_data_all_wa <- get_counts_on_segments(net.lpp.new)
class(prep_all_wa)
prep_all_wa <- readRDS("../Data/prep_all_wa.rds")
var_all_wa <- covars_scaled
head(var_all_wa)
glimpse(var_all_wa)
summary(var_all_wa)
var_all_wa2 <- get_derived_covars(var_all_wa)
glimpse(var_all_wa2)
summary(var_all_wa2)
